softmmu_ss.add(files(
  'console.c',
  'cursor.c',
  'input-keymap.c',
  'input-legacy.c',
  'input.c',
  'kbd-state.c',
  'keymaps.c',
  'qemu-pixman.c',
))
softmmu_ss.add(pixman)

softmmu_ss.add(when: 'CONFIG_LINUX', if_true: files('input-linux.c'))
softmmu_ss.add(when: 'CONFIG_SPICE', if_true: files('spice-core.c', 'spice-input.c', 'spice-display.c'))
softmmu_ss.add(when: [cocoa, 'CONFIG_COCOA'], if_true: files('cocoa.m'))

vnc_ss = ss.source_set()
vnc_ss.add(files(
  'vnc.c',
  'vnc-enc-zlib.c',
  'vnc-enc-hextile.c',
  'vnc-enc-tight.c',
  'vnc-palette.c',
  'vnc-enc-zrle.c',
  'vnc-auth-vencrypt.c',
  'vnc-ws.c',
  'vnc-jobs.c',
))
vnc_ss.add(zlib)
vnc_ss.add(when: 'CONFIG_VNC_SASL', if_true: [files('vnc-auth-sasl.c'), sasl])
softmmu_ss.add_all(when: 'CONFIG_VNC', if_true: vnc_ss)
softmmu_ss.add(when: 'CONFIG_VNC', if_false: files('vnc-stubs.c'))
softmmu_ss.add(when: [opengl, 'CONFIG_OPENGL'], if_true: files('shader.c', 'console-gl.c', 'egl-helpers.c', 'egl-context.c'))
softmmu_ss.add(when: [opengl, 'CONFIG_OPENGL_DMABUF'], if_true: files('egl-headless.c'))
softmmu_ss.add(when: 'CONFIG_VNC_PNG', if_true: png)
softmmu_ss.add(when: 'CONFIG_VNC_JPEG', if_true: jpeg)

ui_modules = []

if config_host.has_key('CONFIG_CURSES')
  ui_modules += [['curses', files('curses.c'), [curses, iconv]]]
endif

if config_host.has_key('CONFIG_GTK') and config_host.has_key('CONFIG_VTE')
  gtk_ss = ss.source_set()
  gtk_ss.add(gtk, vte, files('gtk.c'))
  gtk_ss.add(when: [x11, 'CONFIG_X11'], if_true: files('x_keymap.c'))
  gtk_ss.add(when: [opengl, 'CONFIG_OPENGL'], if_true: files('gtk-egl.c'))
  gtk_ss.add(when: [opengl, 'CONFIG_GTK_GL'], if_true: files('gtk-gl-area.c'))
  gtk_ss = gtk_ss.apply(config_host, strict: false)
  ui_modules += [['gtk', gtk_ss.sources(), gtk_ss.dependencies()]]
endif

if config_host.has_key('CONFIG_SDL')
  sdl_ss = ss.source_set()
  sdl_ss.add([sdl, pixman, glib], files(
    'sdl2-2d.c',
    'sdl2-input.c',
    'sdl2.c',
  ))
  sdl_ss.add(when: [opengl, 'CONFIG_OPENGL'], if_true: files('sdl2-gl.c'))
  sdl_ss.add(when: [x11, 'CONFIG_X11'], if_true: files('x_keymap.c'))
  sdl_ss = sdl_ss.apply(config_host, strict: false)
  ui_modules += [['sdl', sdl_ss.sources(), sdl_ss.dependencies()]]
endif

if config_host.has_key('CONFIG_SPICE') and config_host.has_key('CONFIG_GIO')
  spice_ss = ss.source_set()
  spice_ss.add(spice, gio, files('spice-app.c'))
  spice_ss = spice_ss.apply(config_host, strict: false)
  ui_modules += [['spice-app', spice_ss.sources(), spice_ss.dependencies()]]
endif

keymap_gen = find_program('keycodemapdb/tools/keymap-gen')

keymaps = [
  ['atset1', 'qcode'],
  ['linux', 'qcode'],
  ['qcode', 'atset1'],
  ['qcode', 'atset2'],
  ['qcode', 'atset3'],
  ['qcode', 'linux'],
  ['qcode', 'qnum'],
  ['qcode', 'sun'],
  ['qnum', 'qcode'],
  ['usb', 'qcode'],
  ['win32', 'qcode'],
  ['x11', 'qcode'],
  ['xorgevdev', 'qcode'],
  ['xorgkbd', 'qcode'],
  ['xorgxquartz', 'qcode'],
  ['xorgxwin', 'qcode'],
  ['osx', 'qcode'],
]

foreach e : keymaps
  output = 'input-keymap-@0@-to-@1@.c'.format(e[0], e[1])
  custom_target(output,
                output: output,
                capture: true,
                build_by_default: true, # to be removed when added to a target
                input: files('keycodemapdb/data/keymaps.csv'),
                command: [keymap_gen,
                          '--lang', 'glib2',
                          '--varname', 'qemu_input_map_@0@_to_@1@'.format(e[0], e[1]),
                          'code-map', '@INPUT0@', e[0], e[1]])
endforeach

subdir('shader')
subdir('icons')

install_data('qemu.desktop', install_dir: config_host['qemu_desktopdir'])

modules += {'ui': ui_modules}
